"""
Code and documentation generators.

This module provides functions to generate LICENSE, README, and other files.
"""

from datetime import datetime
from typing import Dict, Any, List

from src.core.logging import get_logger

logger = get_logger(__name__)


def generate_mit_license(author: str = "Agent LLM Deployment System") -> str:
    """
    Generate MIT LICENSE content.
    
    Args:
        author: Copyright holder name
        
    Returns:
        LICENSE file content
    """
    year = datetime.now().year
    
    return f"""MIT License

Copyright (c) {year} {author}

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""


def generate_readme(
    task_id: str,
    brief: str,
    checks: List[str],
    repo_url: str,
    pages_url: str,
    files: List[str],
    code_explanation: str = ""
) -> str:
    """
    Generate professional README.md content.
    
    Args:
        task_id: Task identifier
        brief: Project brief
        checks: Evaluation checks
        repo_url: GitHub repository URL
        pages_url: GitHub Pages URL
        files: List of generated files
        code_explanation: Optional code explanation
        
    Returns:
        README.md content
    """
    return f"""# {task_id}

## 📋 Project Summary

{brief}

## 🚀 Live Demo

**Live Site**: [{pages_url}]({pages_url})

## 📂 Repository

**GitHub Repository**: [{repo_url}]({repo_url})

## 🎯 Requirements

This application was built to meet the following requirements:

{chr(10).join(f'- {check}' for check in checks)}

## 📁 Project Structure

```
{chr(10).join(f'├── {file}' for file in files)}
```

## 🛠️ Setup

This is a static web application that requires no build process.

### Local Development

1. Clone the repository:
   ```bash
   git clone {repo_url}
   cd {task_id}
   ```

2. Open `index.html` in your browser:
   ```bash
   # On macOS
   open index.html
   
   # On Linux
   xdg-open index.html
   
   # On Windows
   start index.html
   ```

### Deployment

This application is automatically deployed to GitHub Pages at:
{pages_url}

## 💻 Usage

1. Visit the live site: {pages_url}
2. Follow the on-screen instructions
3. The application will function as specified in the requirements

## 📝 Code Explanation

{code_explanation if code_explanation else "This application uses standard HTML, CSS, and JavaScript to implement the required functionality. All code is well-commented and follows best practices."}

### Key Components

- **index.html**: Main application structure and layout
- **style.css**: Styling and responsive design
- **script.js**: Application logic and interactivity

## 🧪 Testing

The application has been tested against all specified requirements:

{chr(10).join(f'✅ {check}' for check in checks)}

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🤖 Generated By

This application was automatically generated by the **Agent LLM Deployment System** - an autonomous AI web developer.

- **Generated**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")}
- **Task ID**: {task_id}

---

*Made with ❤️ by Agent LLM Deployment System*
"""


def generate_gitignore() -> str:
    """
    Generate .gitignore content.
    
    Returns:
        .gitignore file content
    """
    return """# Dependencies
node_modules/
package-lock.json

# Environment variables
.env
.env.local
.env.*.local

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db

# Logs
*.log
logs/

# Build outputs
dist/
build/
*.min.js
*.min.css

# Temporary files
*.tmp
.cache/
"""


async def generate_code_explanation(
    brief: str,
    files_content: Dict[str, str],
    llm_service
) -> str:
    """
    Generate code explanation using LLM.
    
    Args:
        brief: Project brief
        files_content: Dict of filename -> content
        llm_service: LLM service instance
        
    Returns:
        Code explanation text
    """
    try:
        prompt = f"""
        Explain the following code in a clear, professional manner for a README.md file.
        
        Project Brief: {brief}
        
        Files:
        {chr(10).join(f'--- {name} ---{chr(10)}{content[:500]}...' for name, content in files_content.items())}
        
        Provide a concise explanation of:
        1. How the code works
        2. Key features implemented
        3. Technologies used
        4. Architecture overview
        
        Keep it professional and suitable for a README.md file.
        """
        
        system_message = "You are a technical writer creating documentation for web applications."
        
        explanation = await llm_service.generate_response(
            prompt=prompt,
            system_message=system_message,
            max_tokens=500,
            temperature=0.3
        )
        
        return explanation
        
    except Exception as e:
        logger.error(f"Failed to generate code explanation: {e}")
        return "This application implements the required functionality using modern web technologies."
